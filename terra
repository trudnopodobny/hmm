insertsort([],[],[],[]):-!.
insertsort([H1|T1],[H2|T2],X,Y):-insertsort(T1,T2,X1,Y1),insert(H1,H2,X1,Y1,X,Y).
insert(H1,H2,[],[],[H1],[H2]):-!.
insert(X1,X2,[H1],[H2],[X1,H1],[X2,H2]):-X2=<H2,!.
insert(X1,X2,[H1|T1],[H2|T2],[X1,H1|T1],[X2,H2|T2]):-X2=<H2,!.
insert(X1,X2,[H1|T1],[H2|T2],[H1|T3],[H2|T4]):-insert(X1,X2,T1,T2,T3,T4).

//=====================================================================


zad1(L,X):-rozbij(L,L1),usun(L1,L2),polacz(L2,L3),insertsort1(L,L3,X,_).
rozbij([],[]):-!.
rozbij([H|T],[H1|T1]):-rozbijaj(H,H1),rozbij(T,T1).
rozbijaj(0,[]):-!.
rozbijaj(X,Y):-H is mod(X,10), X1 is div(X,10),rozbijaj(X1,Y1),append(Y1,[H],Y).
usun([],[]):-!.
usun([H|T],X):-usuwaj(H,H1),usun(T,X1),append([H1],X1,X).
usuwaj([H],[H]):-!.
usuwaj([H1,H2|T],T1):-H2<H1,!,usuwaj([H1|T],T1).
usuwaj([H1,H2|T],[H1|T1]):-usuwaj([H2|T],T1).
polacz([],[]):-!.
polacz([H|T],X):-odwracaj(H,Ht),lacz(Ht,H1),polacz(T,X1),append([H1],X1,X).
odwracaj([],[]):-!.
odwracaj([H|T],X):-odwracaj(T,X1),append(X1,[H],X).
lacz([],0):-!.
lacz([H|T],S):-lacz(T,S1),S is 10*S1 +H.


zad2(L,X):-binarnie(L,L1),combine(L1,L2),polacz2(L2,L3),insertsort2(L,L3,X,_).
binarnie([],[]):-!.
binarnie([H|T],X):-bin(H,H1),binarnie(T,X1),append([H1],X1,X).
bin(0,[]):-!.
bin(H,X):-S is mod(H,2), H1 is div(H,2), bin(H1,X1),append(X1,[S],X).
combine([],[]):-!.
combine([H|T],X):-com(H,1,H1),combine(T,X1),append([H1],X1,X).
com([],1,[]):-!.
com([H1,H2|T],M,T1):-H1=H2,!,M1 is M + 1,com([H2|T],M1,T1).
com([_|T],M,[M|T1]):-M1 is 1, com(T,M1,T1).
polacz2([],[]):-!.
polacz2([H|T],X):-odwracaj2(H,H1),lacz2(H1,H2),polacz2(T,X1),append([H2],X1,X).
odwracaj2([],[]):-!.
odwracaj2([H|T],X):-odwracaj2(T,X1),append(X1,[H],X).
lacz2([],0):-!.
lacz2([H|T],S):-lacz2(T,S1),S is 10*S1 +H.


alfabet([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]).
zad3(L,X):-odleglosci3(L,L,L1),insertsort3(L,L1,X,_).
odleglosci3(_,[],[]):-!.
odleglosci3(L,[H|T],X):-odl3(L,H,H1),odleglosci3(L,T,X1),append([H1],X1,X).
odl3([X],H,H1):-char_code(X,N1),char_code(H,N2), H1 is abs(N1-N2),X\=H,!.
odl3([_],_,99):-!.
odl3([H|T],X,M):-H\=X,odl3(T,X,M1),char_code(H,N1),char_code(X,N2),M is abs(N1 - N2),M<M1,!.
odl3([_|T],X,M):-odl3(T,X,M).


zad4(L,X):-dzielniki4(L,L1),sumuj4(L,L1,L2),insertsort4(L,L2,X,_).
dzielniki4([],[]):-!.
dzielniki4([H|T],X):-dziel4(H,1,H1),dzielniki4(T,X1),concat4([H1],X1,X).
concat4([],L,L):-!.
concat4([H|T],L2,[H|T1]):-concat4(T,L2,T1).
dziel4(H,H,[]):-!.
dziel4(H,M,[M|T]):-H mod M =:= 0,!, M1 is M +1,dziel4(H,M1,T).
dziel4(H,M,T):-M1 is M+1,dziel4(H,M1,T).
sumuj4([],[],[]):-!.
sumuj4([H|T],[H1|T1],X):-sum4(H,H1,H2),sumuj4(T,T1,X1),concat4([H2],X1,X).
sum4(_,[],0):-!.
sum4(X,[H|T],S):-X mod 2 =:=1,H mod 2=:= 1,sum4(H,T,S1),S is H + S1.
sum4(X,[H|T],S):-X mod 2 =:=1,H mod 2=:= 0,sum4(H,T,S).
sum4(X,[H|T],S):-X mod 2 =:=0,H mod 2=:= 0,sum4(X,T,S1),S is H + S1.
sum4(X,[H|T],S):-X mod 2 =:=0,H mod 2=:= 1,sum4(X,T,S).


zad5(L,X):-srodki5(L,L1),minimalna5(L1,L1,L2),insertsort5(L,L2,X,_).
srodki5([],[]):-!.
srodki5([H|T],X):-sr5(H,S),srodki5(T,X1),append([S],X1,X).
sr5([A,B],H):-H is (B+A)/2.
minimalna5(_,[],[]):-!.
minimalna5(L,[H|T],X):-min5(L,H,H1),minimalna5(L,T,X1),append([H1],X1,X).
min5([H],X,H1):-X\=H,!,H1 is abs(H-X).
min5([_],_,999999):-!.
min5([H|T],X,M):-X\=H,min5(T,X,M1),M is abs(H-X),M<M1,!.
min5([_|T],X,M):-min5(T,X,M).


zad6(L1,L2,X):-najblizej6(L2,L1,L3),insertsort6(L3,L4),polacz6(L4,X).
najblizej6([],_,[]):-!.
najblizej6([H|T],L1,X):-naj6(H,L1,H1),najblizej6(T,L1,X1),append([H1],X1,X).
naj6(X,[H],[X,H]):-!.
naj6(X,[H|T],[X,H]):-naj6(X,T,[X,M]),char_code(H,N1),char_code(M,N2),char_code(X,N3),abs(N3-N1)<abs(N3-N2),!.
naj6(X,[_|T],[X,M]):-naj6(X,T,[X,M]).
polacz6([],[]):-!.
polacz6(L,[H|T]):-lacz6(L,L1,H),polacz6(L1,T).
lacz6([[_,B]],[],[B]):-!.
lacz6([[A,B],[A1,B1]|T],[[A1,B1]|T],[A]):-char_code(B,N1),char_code(B1,N2),N1\=N2,!.
lacz6([[A,_]|T],L2,[A|T1]):-lacz6(T,L2,T1).


zad9(L,X):-szesnastkowo9(L,L1),usuwanie9(L1,L2),polacz9(L2,L3),insertsort9(L,L3,X,_).
szesnastkowo9([],[]):-!.
szesnastkowo9([H|T],X):-szes9(H,H1),szesnastkowo9(T,X1),append([H1],X1,X).
szes9(0,[]):-!.
szes9(H,X):-H1 is mod(H,16), H1 =:= 15, !,S is "F",H2 is H //16,szes9(H2,X1),append(X1,[S],X).
szes9(H,X):-H1 is mod(H,16), H1 =:= 14, !,S is "E",H2 is H //16,szes9(H2,X1),append(X1,[S],X).
szes9(H,X):-H1 is mod(H,16), H1 =:= 13, !,S is "D",H2 is H //16,szes9(H2,X1),append(X1,[S],X).
szes9(H,X):-H1 is mod(H,16), H1 =:= 12, !,S is "C",H2 is H //16,szes9(H2,X1),append(X1,[S],X).
szes9(H,X):-H1 is mod(H,16), H1 =:= 11, !,S is "B",H2 is H //16,szes9(H2,X1),append(X1,[S],X).
szes9(H,X):-H1 is mod(H,16), H1 =:= 10, !,S is "A",H2 is H //16,szes9(H2,X1),append(X1,[S],X).
szes9(H,X):-H1 is mod(H,16),H2 is H//16,szes9(H2,X1),append(X1,[H1],X).
usuwanie9([],[]):-!.
usuwanie9([H|T],X):-usu9(H,H1),usuwanie9(T,X1),append([H1],X1,X).
usu9([],[]):-!.
usu9([H|T],[H|T1]):-H<10,!,usu9(T,T1).
usu9([_|T],T1):-usu9(T,T1).
polacz9([],[]):-!.
polacz9([H|T],X):-odwracaj9(H,H1),lacz9(H1,H2),polacz9(T,X1),append([H2],X1,X).
odwracaj9([],[]):-!.
odwracaj9([H|T],X):-odwracaj9(T,X1),append(X1,[H],X).
lacz9([],0):-!.
lacz9([H|T],S):-lacz9(T,S1),S is 10*S1 + H.


zad10(L,X):-binarnie10(L,L1),usuwanie10(L1,L2),dziesietny10(L2,L3),insertsort10(L,L3,X,_).
binarnie10([],[]):-!.
binarnie10([H|T],X):-bin10(H,H1),binarnie10(T,X1),append([H1],X1,X).
bin10(0,[]):-!.
bin10(H,X):-H1 is mod(H,2),H2 is H//2,bin(H2,X1),append(X1,[H1],X).
usuwanie10([],[]):-!.
usuwanie10([H|T],X):-usun10(H,H1),usuwanie10(T,X1),append([H1],X1,X).
usun10([H],[H]):-!.
usun10([H1,H1|T],T1):-usun10([H1|T],T1),!.
usun10([H1,H2|T],[H1|T1]):-H1\=H2,usun10([H2|T],T1).
dziesietny10([],[]):-!.
dziesietny10([H|T],X):-length(H,N),N1 is N - 1,dzies10(H,N1,H1),dziesietny10(T,X1),append([H1],X1,X).
dzies10([],_,0):-!.
dzies10([H|T],N,S):-N1 is N-1,dzies10(T,N1,S1),S is S1+H*2^N.


zad12(L,X):-srednia12(L,L1),insertsort2(L,L1,X,_).
srednia12([],[]):-!.
srednia12([H|T],X):-srednia12(T,X1),
    insertsort1b(H,[_|T1]),
    odwracaj(T1,[_|T2]),
    sumuj(T2,S),length(T2,I),
    sred(S,I,S1),
    append([S1],X1,X).
odwracaj([],[]):-!.
odwracaj([H|T],X):-odwracaj(T,X1),append(X1,[H],X).
sumuj([],0):-!.
sumuj([H],H):-!.
sumuj([H|T],X):-sumuj(T,X1),X is X1+H.
sred(S,L,X):-X is div(S,L).


zad13(L,X):-wysrodkowane13(L,L1),arytmetyczna13(L1,L2),insertsort13(L,L2,X,_).
wysrodkowane13([],[]):-!.
wysrodkowane13([H|T],X):-maks13(H,_,1,P),length(H,N),Od2 is abs(N-P),Od1 is P-1, m13(Od1,Od2,H,H1),wysrodkowane13(T,X1),append([H1],X1,X).
maks13([M],M,P,P):-!.
maks13([H|T],H,P1,P1):-P3 is P1 + 1,maks13(T,M,P3,_),H>M,!.
maks13([_|T],M,P1,P2):-P3 is P1 +1,maks13(T,M,P3,P2).
m13(X,X,L,L):-!.
m13(Odl1,Odl2,L,Lw):-Odl1>Odl2,!,Odl is Odl1 -1,append([_],L1,L),m13(Odl,Odl2,L1,Lw).
m13(Odl1,Odl2,L,Lw):-Odl1<Odl2,Odl is Odl2 -1,append(L1,[_],L),m13(Odl1,Odl,L1,Lw).
arytmetyczna13([],[]):-!.
arytmetyczna13([H|T],X):-suma13(H,S),length(H,N),A is S/N,arytmetyczna13(T,X1),append([A],X1,X).
suma13([],0):-!.
suma13([H|T],S):-suma13(T,S1),S is S1 + H.


zad15(L,X):-stosunki15(L,L,L1),insertsort15(L,L1,X,_).
stosunki15([],_,[]):-!.
stosunki15([H|T],L,X):-append(L,L1),ile_unikalnych15(H,H1),ile_unik15(H1,L1,H2),dlugosc15(H2,0,N1),dlugosc15(H,0,N2),Y is N1/N2, stosunki15(T,L,X1),append([Y],X1,X).
dlugosc15([],N,N):-!.
dlugosc15([_|T],M,N):-M1 is M +1,dlugosc15(T,M1,N).
ile_unikalnych15([],[]):-!.
ile_unikalnych15([H|T],[H|T1]):-ile_unikalnych15(T,T1),not(member(H,T1)),!.
ile_unikalnych15([_|T],T1):-ile_unikalnych15(T,T1).
ile_unik15([],_,[]):-!.
ile_unik15([H|T],L,[H|T1]):-ile15(L,H,N),N is 1,!,ile_unik15(T,L,T1).
ile_unik15([_|T],L,T1):-ile_unik15(T,L,T1).
ile15([],_,0):-!.
ile15([H|T],H,N):-ile15(T,H,N1),N is N1 + 1,!.
ile15([_|T],X,N):-ile15(T,X,N).


zad18(L,X):-zamiana18(L,[H|T]),dzialania18(H,T,H,L1),insertsort18(L1,[H1|T1]),czestosc18(H1,T1,1,L3),max18(L3,_,X).
zamiana18([],[]):-!.
zamiana18([H|T],X):-H = /, H1 is 1,!,zamiana18(T,X1),append([H1],X1,X).
zamiana18([H|T],X):-H = \, H1 is -1,!,zamiana18(T,X1),append([H1],X1,X).
dzialania18(_,[],_,[]):-!.
dzialania18(H,[H|T],N,X):-H is 1,!,N1 is N +1,dzialania18(H,T,N1,X1),append([N],X1,X),!.
dzialania18(H,[H|T],N,X):-H is -1,!,N1 is N -1,dzialania18(H,T,N1,X1),append([N],X1,X),!.
dzialania18(Y,[H|T],N,X):-Y\=H,dzialania18(H,T,N,X1),append([N],X1,X).
czestosc18(H,[H],N,[[H,N1]]):-N1 is N+1,!.
czestosc18(Y,[H],N,[[Y,N],[H,1]]):-!.
czestosc18(H,[H|T],N,X):-N1 is N +1,czestosc18(H,T,N1,X),!.
czestosc18(Y,[H|T],N,X):-Y\=H,czestosc18(H,T,1,X1),append([[Y,N]],X1,X).
max18([[X,N]],N,X):-!.
max18([[A,B]|T],B,A):-max18(T,N,X),B>N,X\=A,!.
max18([_|T],N,X):-max18(T,N,X).


zad19(L,X):-odleglosci19(L,L,L1),minima19(L1,L2),insertsort19(L,L2,X,_).
odleglosci19([],_,[]):-!.
odleglosci19([H|T],L,X):-odle19(H,L,H1),odleglosci19(T,L,X1),append([H1],X1,X).
odle19(_,[],[]):-!.
odle19([A,B],[[A,B]|T],X):-odle19([A,B],T,X),!.
odle19([A,B],[[A1,B1]|T],X):-S is sqrt((A1-A)^2 + (B1-B)^2),odle19([A,B],T,X1),append([S],X1,X).
minima19([],[]):-!.
minima19([H|T],X):-min19(H,H1),minima19(T,X1),append([H1],X1,X).
min19([H],H):-!.
min19([H|T],H):-min19(T,M),H<M,!.
min19([_|T],M):-min19(T,M),!.


//=====================================================================

zad 1.
1. Na wejściu jest lista  liczb. Trzeba:
[123,537,153,162]
-rozbic kazda z liczb na liste jej cyfr
[[1,2,3][5,3,7][1,5,3][1,6,2]]
-z podlist usunac cyfry, które psuja monotonicznosc rosnaca
[1,2,3][5,7][1,5][1,6]
-polaczyc pozostale cyfry w podliscie spowrotem w liczby 
[123,57,15,16]
-posegregowac wejsciowa liste na podstawie otrzymanych liczb
[153,162,537,123]

//=====================================================================

zad 2.
była sobie lista [27, 17, 24, 25, 31, 21] . trzeba było tą listę zamienić na listę list zer i jedynek - [[1,1,0,1,1],[1,0,0,0,1],[1,1,0,0,0],[1,1,0,0,1],[1,1,1,1,1],[1,0,1,0,1]]. 
potem trzeba było sprawdzić kolejne bity i liczyć ile jest takich samych pod rząd - [[2,1,2],[1,3,1],[2,3],[2,2,1],[5],[1,1,1,1,1]]. 
potem zamienić tą listę list na listę liczb składających się z tych cyferek - [212,131,23,221,5,11111]. posortować je - [5, 23, 131, 212, 221, 11111]. 
i na koniec wypisać te początkowe liczby na odpowiednich miejscach na podstawie tej posortowanej listy - [31, 24, 17, 27, 25, 21].

//=====================================================================

zad 3.
dany jest fakt alfabet([a,b,c,d,...]). oraz lista wejściowa [a,j,n,t,c,o,g]
Należy wyznaczyć odległość każdego elementu listy do najbliższego sąsiada wg pozycji w alfabecie (np. najbliższy sąsiad "a" to "c" i odległość wynosi 2). 
Następnie listę wejściową należy posortować wg tych odległości. Predykaty pomocnicze idx(Sym,Idx), odl(Sym,Sym2,D), min(Sym,Lwe,Sąsiad)

//=====================================================================

zad 4.
"Lista liczb, np [20,11,24,15], każda liczbę rozbić na listę dzielników, dla parzystych dodać dzielniki parzyste, dla nparz nparzyste. Posortować wg tej sumy.
20 - dzielniki 1,2,4,5,10 - suma 16
Wyjściowa lista [11,15,20,24]"

//=====================================================================

zad 5.
Dana jest lista przedziałów:
[[-1,3],[14,20],[0,14]]
-wyznaczyć środek każdej list
[[1],[17],[7]]
-minimalną odleglosc miedzy środkami, czyli dla elementu 1 to jest 6 do srodka trzeciego przedzialu
[[6],[10],[6]].
-na podstawie tych minimalnych odleglosci posortowac dane początkowo przedziały

//=====================================================================

zad 6.
alfabet([a,b,c,d,...,y,z]
do utworzenia predykat alfagrup(Lwe1,Lwe2,Lwy)
Lwe1 zawiera unikalne elementy z alfabetu np. [c,m,p]
Lwe2 zawiera dowolne elementy z alfabetu np. [a,b,d,e,r,y,a,k,n,b,z]
Lwy ma zawierać elementy z listy Lwe2 pogrupowane wg tego do którego elementu unikalnego mają najbliżej np. [[a,a,b,b,d,e],[k,n],[r,y,z]]

//=====================================================================

zad 9.
1) Podana jest lista liczb, którą należy posortować według klucza. Co zrobić, aby uzyskać klucz: daną listę należy zamienić na listę liczb szesnastkowych, a nastepnie usunąć z podanych liczb cyfry większe od 10 (A,B,C itd). 
przyklad: 
164 177 178
A4 B1 B2
4 1 2
posortowane: 177 178 164

//=====================================================================

zad 10.
2) Jakby ktoś chciał poćwiczyć to dzisiaj dostaliśmy coś takiego:
Narysowal nam taki przyklad:
21->10101->10101->21
15->1111->1->1
11->1011->101->5
Pierwsza kolumna to elementy listy wejsciowej
Druga kolumna to ich binarny zapis
Trzecia to usuniecie powtorzeb w tym zapisie
A ostatnia zamiana tego wczesniejszego na dziesietny
Musielismy posortowac liste wejsciowa wedlug klucza ktorym sa wartosci z ostatniej kolumny

//=====================================================================

zad 13.
masz listę list. 
1. znajdujesz maksimum
2. obcinasz każdą listę z prawej lub lewej strony, by max był w środku
np. [1,5,3,9,0]->[3,9,0]
3. liczysz średnią z tej obciętej listy - to jest klucz
4. sortujesz wg klucza

//=====================================================================

zad 15.
posortować liste List od najmniejszego stopnia unikalnych elementow do najwiekszego czyli:
dane wejsciowe: run([[t,y],[a,b,c],[d,b,c,g,x],[g,h,i,j,k,z]],L).
[t,y] 2/2 = 1 -> 2 elementy unikalne / 2 elementy w danej liscie = stopien unikalnosci 
[a,b,c] - 1/3 = 0.33
[d,b,c,g,x] - 2/5 = 0.4
[g,h,i,j,k,z] - 5/6 = 0.83
ddp: [[a,b,c],[d,b,c,g,x],[g,h,i,j,k,z],[t,y]]
rozwiązanie autorstwa Michał Juszczak i mojego:
http://wklej.org/hash/50625b0e571/
w razie pytań służę pomocą.

//=====================================================================

zad 18.
Farciarze dostali to samo zadanie co było we wtorek - / i \ tworzące wykres
dzisiaj na poprawce labów dostałam takie zadanie:
lista wejściowa[/,/,\,\,\,\,/,/,\,\,\,\,/,/,/,\], którą trzeba było zmienić na [1,2,2,1,0,-1,-1,0,0,-1,-2,-3,-3,-2,-1,-1], 
czyli chodzi mniej więcej o to, że '/' znaczy plus 1, a '\' znaczy minus 1, 
potem trzeba było z tej drugiej listy wybrać najczęściej powtarzającą się liczbę.

//=====================================================================

zad 19.
Czy ktoś miałby może jakieś uwagi do mojego rozwiązania tego zadania:
Dana jest lista punktów:
[[3,6],[1,2],[5,5],[5,2]]
-predykat odleglosc(P1,P2,Odl) - euklidesowa odległość między punktami
-dla każdego punktu znaleźć minimalną odległość do sąsiada - predykat minodl(Lista,Punkt,Minodl)
-posortować według tych odległości
[[3, 6], [5, 5], [5, 2], [1, 2]]
rozwiązanie:http://wklej.org/id/1800607/
Nie rozumiem czemu sortowanie dla 3 elementowej listy wywala out of stack exception :<
